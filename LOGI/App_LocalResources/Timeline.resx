<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllCategories" xml:space="preserve">
    <value>all categories</value>
  </data>
  <data name="AllCountries" xml:space="preserve">
    <value>all countries</value>
  </data>
  <data name="BilateralAgreements" xml:space="preserve">
    <value>Bilateral Agreements</value>
  </data>
  <data name="Environmental" xml:space="preserve">
    <value>Environmental</value>
  </data>
  <data name="ExploratoryDrilling" xml:space="preserve">
    <value>Exploratory Drilling</value>
  </data>
  <data name="FilterBy" xml:space="preserve">
    <value>filter by</value>
  </data>
  <data name="GeophysicalSurveying" xml:space="preserve">
    <value>Geophysical Surveying</value>
  </data>
  <data name="Legislation" xml:space="preserve">
    <value>Legislation</value>
  </data>
  <data name="Licensing" xml:space="preserve">
    <value>Licensing</value>
  </data>
  <data name="MaritimeBoundaryDispute" xml:space="preserve">
    <value>Maritime Boundary Dispute</value>
  </data>
  <data name="Pagetitle" xml:space="preserve">
    <value>Timeline</value>
  </data>
  <data name="RegionalDiscoveries" xml:space="preserve">
    <value>Regional Discoveries</value>
  </data>
  <data name="Subtitle" xml:space="preserve">
    <value>of oil and gas developments in Lebanon and the region</value>
  </data>
  <data name="TimelineTitle" xml:space="preserve">
    <value>Timeline</value>
  </data>
  <data name="TL101" xml:space="preserve">
    <value>Jun 2015</value>
  </data>
  <data name="TL102" xml:space="preserve">
    <value>2D Onshore Seismic Survey</value>
  </data>
  <data name="TL11" xml:space="preserve">
    <value>Late 1960s</value>
  </data>
  <data name="TL12" xml:space="preserve">
    <value>First O&amp;G Onshore Exploration</value>
  </data>
  <data name="TL13" xml:space="preserve">
    <value>Lebanese Petroleum Company Drills exploratory wells in al Qa, Adloun, and another in Yamour.</value>
  </data>
  <data name="TL21" xml:space="preserve">
    <value>Early 1970s</value>
  </data>
  <data name="TL22" xml:space="preserve">
    <value>Seismic Surveys Offshore Tripoli</value>
  </data>
  <data name="TL31" xml:space="preserve">
    <value>Jan 2007</value>
  </data>
  <data name="TL32" xml:space="preserve">
    <value>Jan 2007 Lebanon-Cyprus EEZ Agreement Signed</value>
  </data>
  <data name="TL33" xml:space="preserve">
    <value>Lebanon and Cyprus agree in principle to terms over demarcating their Exclusive Economic Zones. The Lebanese government has never ratified this agreement</value>
  </data>
  <data name="TL41" xml:space="preserve">
    <value>Jan 2009</value>
  </data>
  <data name="TL42" xml:space="preserve">
    <value>Israel: Discovery of Tamer Gas Field</value>
  </data>
  <data name="TL43" xml:space="preserve">
    <value>Tamer Gas Field is a reservoir estimated to contain 10 trillion cubic feet of natural gas</value>
  </data>
  <data name="TL51" xml:space="preserve">
    <value>Aug 2010</value>
  </data>
  <data name="TL52" xml:space="preserve">
    <value>Hydrocarbon Law Passed</value>
  </data>
  <data name="TL61" xml:space="preserve">
    <value>Dec 2010</value>
  </data>
  <data name="TL62" xml:space="preserve">
    <value>Israel: Leviathan Gas Field Discovered</value>
  </data>
  <data name="TL71" xml:space="preserve">
    <value>Dec 2011</value>
  </data>
  <data name="TL72" xml:space="preserve">
    <value>Cyprus: Aphrodite Gas Field Discovered</value>
  </data>
  <data name="TL73" xml:space="preserve">
    <value>In June 2015 Cyprus announces plans for the commercialization of this field.</value>
  </data>
  <data name="TL81" xml:space="preserve">
    <value>Nov 2012</value>
  </data>
  <data name="TL82" xml:space="preserve">
    <value>Petroleum Administration Formed</value>
  </data>
  <data name="TL83" xml:space="preserve">
    <value>Board of Lebanese Petroleum Administration formed after months of debate and missed deadlines</value>
  </data>
  <data name="TL91" xml:space="preserve">
    <value>Feb 2013</value>
  </data>
  <data name="TL92" xml:space="preserve">
    <value>Pre-qualification Phase Launched</value>
  </data>
  <data name="TL93" xml:space="preserve">
    <value>In March, the pre-qualification round closed with 46 companies eligible to bid in Lebanon’s first licensing round</value>
  </data>
  <data name="ForOilAndGas" xml:space="preserve">
    <value>for Oil and Gas in Lebanon and the region</value>
  </data>
  <data name="FullTimeLine" xml:space="preserve">
    <value>FULL TIMELINE HERE</value>
  </data>
  <data name="TimeLine" xml:space="preserve">
    <value>TIMELINE</value>
  </data>
</root>