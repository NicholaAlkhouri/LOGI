<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplyExpertTitle" xml:space="preserve">
    <value>Join as an Expert</value>
  </data>
  <data name="ApplyNow" xml:space="preserve">
    <value>APPLY NOW</value>
  </data>
  <data name="ApplyPageTitle" xml:space="preserve">
    <value>Apply To Job</value>
  </data>
  <data name="AreYouExpert" xml:space="preserve">
    <value>Are you an expert?</value>
  </data>
  <data name="Conditions" xml:space="preserve">
    <value>EXPERTS ONLY &lt;br/&gt;
NO POLITICAL AFFILIATIONS&lt;br/&gt;
NO CONFLICT OF INTEREST&lt;br/&gt;
VOLUNTEERS&lt;br/&gt;
DRIVE TO MAKE A DIFFERENCE</value>
  </data>
  <data name="ConditionsTitle" xml:space="preserve">
    <value>Conditions to Apply:</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country of Residence</value>
  </data>
  <data name="CurrentOpenings" xml:space="preserve">
    <value>Current Openings</value>
  </data>
  <data name="Deadline" xml:space="preserve">
    <value>Deadline</value>
  </data>
  <data name="DesiredChar" xml:space="preserve">
    <value>Desired Characteristics</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>DOWNLOAD PDF</value>
  </data>
  <data name="DownloadDesc" xml:space="preserve">
    <value>Download PDF to learn more about LOGI’s rigorous selection process and policy</value>
  </data>
  <data name="DownloadDesc2" xml:space="preserve">
    <value>Learn more about LOGI's rigorous selection process and policy</value>
  </data>
  <data name="Education" xml:space="preserve">
    <value>Education</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EssentialRes" xml:space="preserve">
    <value>Essential Responsibilities</value>
  </data>
  <data name="ExpertApply" xml:space="preserve">
    <value>APPLY NOW</value>
  </data>
  <data name="ExpertDesc1" xml:space="preserve">
    <value>Join LOGI to shape Lebanon’s petroleum industry</value>
  </data>
  <data name="Expertise" xml:space="preserve">
    <value>Expertise</value>
  </data>
  <data name="FillForm" xml:space="preserve">
    <value>Fill out the form to apply</value>
  </data>
  <data name="FullName" xml:space="preserve">
    <value>Full Name</value>
  </data>
  <data name="HowToContribute" xml:space="preserve">
    <value>How do you envisage your contribution to LOGI?</value>
  </data>
  <data name="JobNumber" xml:space="preserve">
    <value>Job number</value>
  </data>
  <data name="JoinExperts" xml:space="preserve">
    <value>Join as an Expert</value>
  </data>
  <data name="JoinExpertsDes" xml:space="preserve">
    <value>Become a contributor by joining the Network of Oil &amp; Gas Experts</value>
  </data>
  <data name="JoinLogi" xml:space="preserve">
    <value>JOIN LOGI</value>
  </data>
  <data name="JoinTeam" xml:space="preserve">
    <value>Join the Team</value>
  </data>
  <data name="JoinTeamDes" xml:space="preserve">
    <value>Get hired and be part of the LOGI team</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="MessagePlaceholder" xml:space="preserve">
    <value>Your message goes here</value>
  </data>
  <data name="Outcome" xml:space="preserve">
    <value>Outcome</value>
  </data>
  <data name="PageTitle" xml:space="preserve">
    <value>Join LOGI</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="PoliticalAffiliation" xml:space="preserve">
    <value>Political affiliation</value>
  </data>
  <data name="ProjectDeadline" xml:space="preserve">
    <value>Rolling Deadline</value>
  </data>
  <data name="Qualifications" xml:space="preserve">
    <value>Qualifications</value>
  </data>
  <data name="ReadAndApply" xml:space="preserve">
    <value>Read more and Apply</value>
  </data>
  <data name="RoleSummary" xml:space="preserve">
    <value>Role Summary</value>
  </data>
  <data name="Salary" xml:space="preserve">
    <value>Salary</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>SEND</value>
  </data>
  <data name="Thankyou" xml:space="preserve">
    <value>Thank you for your &lt;br/&gt; application!&lt;br /&gt;
                        &lt;span&gt;We will review it and get back to you.&lt;/span&gt;</value>
  </data>
  <data name="UploadResume" xml:space="preserve">
    <value>UPLOAD RESUME</value>
  </data>
  <data name="WhyToJoin" xml:space="preserve">
    <value>Why do you want to join LOGI?</value>
  </data>
</root>